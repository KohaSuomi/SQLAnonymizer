borrowers, borrowernumber,     preserve, #This is a comment: we need to debug issues found in production and find the matching borrower in dev/testing
borrowers, surname,            etunimet
borrowers, firstname,          sukunimet
borrowers, othernames,         "sub { return SQLAnon::Lists::get_value('adjektiivit') . SQLAnon::Lists::get_value('varaustunnus') . int(rand(9999)); }"
borrowers, title,              adjektiivit
borrowers, email,              "sub { return 'nobody@example.com'; }"
borrowers, phone,              "sub { return '000-000 0000'; }"
borrowers, mobile,             "sub { return '000-000 0000'; }"
borrowers, smsalertnumber,     "sub { return '000-000 0000'; }"
borrowers, userid,             "sub { return SQLAnon::Lists::get_value('varaustunnus') . sprintf('%c%c', 65+rand(25), 65+rand(25)); }"
borrowers, opacnote,           quotes
borrowers, borrowernotes,      quotes
borrowers, password,           "sub { return '$6$bmpusw./X$TkzFd8RSlVsPVNtGWmIgDDE9eV.FzK5WM/86EEZ3KtJOlAfwO6YtQLkm/jLQJUCpgdJKU5Ou4kAKiyEitrq/N.'; }"
borrowers, address,            addressWithSuffix()
borrowers, dateenrolled,       preserve, #because of the borrowernumber link, no reason to obfuscate
borrowers, dateexpiry,         preserve, #because of the borrowernumber link, no reason to obfuscate
borrowers, dateofbirth,        dateOfBirthAnonDayMonth(), #This uses a SQLAnon::Filter to do anonymization. You can extend your own!
borrowers, contactname,        sukunimet
borrowers, contacttitle,       adjektiivit
borrowers, contactfirstname,   etunimet
borrowers, contactnote,        quotes
borrowers, altcontactfirstname,etunimet
borrowers, altcontactsurname,  sukunimet
borrowers, altcontactaddress1, addressWithSuffix()
borrowers, altcontactphone,    "sub { return '000-000 0000'; }"

deletedborrowers, borrowernumber,     preserve, #This is a comment: we need to debug issues found in production and find the matching borrower in dev/testing
deletedborrowers, surname,            etunimet
deletedborrowers, firstname,          sukunimet
deletedborrowers, othernames,         "sub { return SQLAnon::Lists::get_value('adjektiivit') . SQLAnon::Lists::get_value('varaustunnus') . int(rand(9999)); }"
deletedborrowers, title,              adjektiivit
deletedborrowers, email,              "sub { return 'nobody@example.com'; }"
deletedborrowers, phone,              "sub { return '000-000 0000'; }"
deletedborrowers, mobile,             "sub { return '000-000 0000'; }"
deletedborrowers, smsalertnumber,     "sub { return '000-000 0000'; }"
deletedborrowers, userid,             "sub { return SQLAnon::Lists::get_value('varaustunnus') . sprintf('%c%c', 65+rand(25), 65+rand(25)); }"
deletedborrowers, opacnote,           quotes
deletedborrowers, borrowernotes,      quotes
deletedborrowers, password,           "sub { return '$6$bmpusw./X$TkzFd8RSlVsPVNtGWmIgDDE9eV.FzK5WM/86EEZ3KtJOlAfwO6YtQLkm/jLQJUCpgdJKU5Ou4kAKiyEitrq/N.'; }"
deletedborrowers, address,            addressWithSuffix()
deletedborrowers, dateenrolled,       preserve, #because of the borrowernumber link, no reason to obfuscate
deletedborrowers, dateexpiry,         preserve, #because of the borrowernumber link, no reason to obfuscate
deletedborrowers, dateofbirth,        dateOfBirthAnonDayMonth(), #This uses a SQLAnon::Filter to do anonymization. You can extend your own!
deletedborrowers, contactname,        sukunimet
deletedborrowers, contacttitle,       adjektiivit
deletedborrowers, contactfirstname,   etunimet
deletedborrowers, contactnote,        quotes
deletedborrowers, altcontactfirstname,etunimet
deletedborrowers, altcontactsurname,  sukunimet
deletedborrowers, altcontactaddress1, addressWithSuffix()
deletedborrowers, altcontactphone,    "sub { return '000-000 0000'; }"

borrower_modifications, borrowernumber,     preserve, #This is a comment: we need to debug issues found in production and find the matching borrower in dev/testing
borrower_modifications, surname,            etunimet
borrower_modifications, firstname,          sukunimet
borrower_modifications, othernames,         "sub { return SQLAnon::Lists::get_value('adjektiivit') . SQLAnon::Lists::get_value('varaustunnus') . int(rand(9999)); }"
borrower_modifications, title,              adjektiivit
borrower_modifications, email,              "sub { return 'nobody@example.com'; }"
borrower_modifications, phone,              "sub { return '000-000 0000'; }"
borrower_modifications, mobile,             "sub { return '000-000 0000'; }"
borrower_modifications, smsalertnumber,     "sub { return '000-000 0000'; }"
borrower_modifications, userid,             "sub { return SQLAnon::Lists::get_value('varaustunnus') . sprintf('%c%c', 65+rand(25), 65+rand(25)); }"
borrower_modifications, opacnote,           quotes
borrower_modifications, borrowernotes,      quotes
borrower_modifications, password,           "sub { return '$6$bmpusw./X$TkzFd8RSlVsPVNtGWmIgDDE9eV.FzK5WM/86EEZ3KtJOlAfwO6YtQLkm/jLQJUCpgdJKU5Ou4kAKiyEitrq/N.'; }"
borrower_modifications, address,            addressWithSuffix()
borrower_modifications, dateenrolled,       preserve, #because of the borrowernumber link, no reason to obfuscate
borrower_modifications, dateexpiry,         preserve, #because of the borrowernumber link, no reason to obfuscate
borrower_modifications, dateofbirth,        dateOfBirthAnonDayMonth(), #This uses a SQLAnon::Filter to do anonymization. You can extend your own!
borrower_modifications, contactname,        sukunimet
borrower_modifications, contacttitle,       adjektiivit
borrower_modifications, contactfirstname,   etunimet
borrower_modifications, contactnote,        quotes
borrower_modifications, altcontactfirstname,etunimet
borrower_modifications, altcontactsurname,  sukunimet
borrower_modifications, altcontactaddress1, addressWithSuffix()
borrower_modifications, altcontactphone,    "sub { return '000-000 0000'; }"

message_queue, content,    "sub { return 'Ave Imperator, morituri te salutant'; }"
message_queue, to_address, "sub { return 'nobody@example.com'; }"

z3950servers, userid,      random
z3950servers, password,    random

systempreferences, value,  kohaSystempreferences()